<!--
{
  "name" : "asynchronous-programming-with-promises",
  "freshnessDate" : 2015-06-25,
  "version" : "0.1",
  "title" : "Asynchronous Programming with Promises",
  "description" : "A basic introduction to how to write asynchronous code using the RSVP promise library.",
  "license" : "CC Attribution-ShareAlike 4.0"
}
-->

<!-- @section -->

# A Quick Introduction to Promises

Promises are a programing construct that you can use to structure
your asynchronous code.  Here's a quick overview of how they work...

We can model data **in memory** with ordinary data types like so

- a string: `var s = 'hello' + ' ' + 'world!';`
- an integer `var i = 40 + 2;`
- a user model: `var currentUser = userManager.getUserLocally({ user_id: 1});`

If for some reason the data we want can't be calculated immediately (for example,
it must be requested over the network from an API), then we can model
data that **will arrive in memory at some point in the future** with Promise data types like so

- a promise for a string: `var sPromise = server.getMessage();`
- a promise for an integer: `var iPromise = server.getCurrentTime();`
- a promise for a user model: `var currentUser = userManager.getUserFromApi({ user_id: 1});`


and just as we can perform calculations **in memory**:

```javascript
var greeting = 'hello';
var name = userManager.getUserLocally({ user_id: 1 }).name;

var message = greeting + ' ' + name;

console.log(message);
```

we can perform calculations with promises **at whatever time in the future they arrive**

```javascript

var greetingPromise = server.getGreeting();
var namePromise = userManager.getUserFromApi({
  user_id: 1 }).then(function(user) {
    return user.name;
  });

var messagePromise = greetingPromise.then(function(greeting) {
  return namePromise.then(function(name) {
    return greeting + ' ' + name;
  });
});

messagePromise.then(function(message) { console.log(message); });
```

<!-- @task, "text" : "Take a moment to compare the two code snippets above (the in-memory one and the promisy one). How do they compare?", "hasDeliverable" : true -->

But enough talk, let's get you writing some code!

To get you started working with promises, we've prepared a simple example application to work on.
In it, we have a team of geologists traveling around a volcano, taking samples of rocks and recording
geological data.

Architecturally, there are two parts to our application

1. There is one central server that collects all the information gathered by the geologists.
2. Each geologist has his own client application that he uses to communicate with the central server.

@asset, "contentType" : "outlearn/image", "location" : "images/client-server-diagram.svg" -->

For this tutorial, you'll be working on the client application.

We've prepared a virtual machine you should use to follow along.
Make sure to have the `vagrant` command installed on your machine.  Then run

```bash
$ git clone __________ # Get the this repository of examples.
$ cd geology-client
$ vagrant up # Start up a virtual machine.  This may take a few minutes.
$ vagrant ssh # Open up a terminal inside the virtual machine.
$ ./test.sh
```

<!-- @task, "text" : "Start your virtual machine and run the test.sh command." -->

you should see a suite of tests run and fail.

Now, in another terminal,

```bash
$ cd geology-client
$ vagrant ssh # Start a new terminal inside the virtual machine.

$ node main.js # Run main.js

```

Now you're ready to start working on problems.

<!-- @section -->

# Using .then

You can create one promise from another by calling `.then`

<!-- @code, "base" : "mock-volcano-server" -->
```javascript

var volcanoPromise = server.getVolcano();

console.log(volcanoPromise);

var coordinatesPromise = volcanoPromise.then(function(volcano) {
  return {
    latitude: volcano.latitude,
    longitude: volcano.longitude,
  };
});

console.log(coordinatesPromise);

volcanoPromise.then(function(volcano) {
  console.log("Got a volcano");
  console.log(volcano);
});

var x = coordinatesPromise.then(function(coordinates) {
  console.log("Got the coordinates");
  console.log(coordinates);
});
```
<!-- @end -->

### Explanation:

Line 2 creates the volcano promise we start with.  It fires off a request to the server for the volcano
and immediately returns with a promise that will eventually "resolve" to a volcano.

On line 6 we use `.then` to create a `coordinatesPromise` for the coordinates of the volcano.  `coordinatesPromise` is
a lot like the `volcanoPromise`, but instead of resolving to a volcano,
it resolves to a latitude and a longitude.

Then `.then` on line 6 takes as its argument a function that will transform a volcano into coordinates
and returns a promise for the coordinates.

<!-- @task, "hasDeliverable" : true, "text" : "Run the code snippet above. What is the longitude of the volcano?" -->

<!-- @task, "hasDeliverable" : true, "text": "What does the promise x resolve to? Why?" -->

## Timelines

Let's say we have a `coordinatesPromise` created like so

<!-- @code, "base" : "mock-volcano-server" -->
```javascript

var volcanoPromise = server.getVolcano();

var coordinatesPromise = volcanoPromise.then(function(volcano) {
  return {
    latitude: volcano.latitude,
    longitude: volcano.longitude,
  };
});
```

A nice way to visually depict the runtime execution of the above promisy code is to
use a timeline:

![](https://s3.amazonaws.com/outlearn-public/OWASP-Module-1/promises-images/simple-timeline.svg)

Looking at the timeline, you'll see the order in which things happen:

- First we make a call to `server.getVolcano()` creating the `volcanoPromise` object.
  This sends a request for the volcano data to the server.
- Immediately afterward, we create the `coordinatesPromise`.  The function to extract the
  latitude and longitude from the volcano is created here, but it isn't run.
- For the next long while (the green bar), we sit around waiting and doing nothing while the request makes its way to the server and back.
- The volcano data comes back from the server. The `volcanoPromise` resolves.
- At this point, the function to extract latitude and longitude runs and returns the coordinates.
  The `coordinatesPromise` resolves.

# Chaining `.then`

So far, the functions we've been passing to `.then` return ordinary javascript objects.
If instead, we call `.then` with a function that returns another promise, the promise returned
by `.then` will resolve with the data from the latter promise.

For example if we write:

```javascript
var messagePromise = server.getVolcano().then(function(volcano) {
  return server.getCurrentTime().then(function(currentTime) {
    return volcano.name + " is looking good at " + currentTime;
  });
});
```

> **NOTE**: `server.getCurrentTime()` returns a promise for the current time.

we get a promise with a timeline that will look something like this:

![](https://s3.amazonaws.com/outlearn-public/OWASP-Module-1/promises-images/chaining-sequential.svg)

<!-- @multipleChoice -->

How many promises are created by the above code snippet?

- [ ] 1
- [ ] 2
- [ ] 3
- [X] 4
- [ ] 5

`.getVolcano`, `.getCurrentTime` and `.then` each return a promise.

<!-- @end -->

If you look at the timeline for the `messagePromise`, you'll notice that it requests the current
time only **after** the server has responded with the volcano.  But there's no reason the client can't request
the current time earlier.
We could instead build a `messagePromise` that requests the current time **before** the server responds with the volcano and
prints out our message after **BOTH** the current time promise and the volcano promise have resolved.

If we built the `messagePromise` that way, it's timeline would look more like this:

![](https://s3.amazonaws.com/outlearn-public/OWASP-Module-1/promises-images/chaining-parallel.svg)

<!-- @code, "base" : "mock-volcano-server" -->

Write a `messagePromise` that will execute with a timeline like the one above.

```javascript

var messagePromise = ....;

```
<!-- @end -->

## Promise Reuse

No matter how many times you call `.then` on a promise, the promise will only fetch data from the server once.

For example:

<!-- @code, "base" : "mock-volcano-server" -->
```javascript
var volcanoPromise = server.getVolcano();

// Call volcanoPromise.then once here.
var latitudePromise = volcanoPromise.then(function(volcano) {
  return volcano.latitude;
});

// Call volcanoPromise.then again here.  It should produce no new requests
// to the server.
var longitudePromise = volcanoPromise.then(function(volcano) {
  return volcano.longitude;
});

var coordinatesPromise = latitudePromise.then(function(latitude) {
  return longitudePromise.then(function(longitude) {
    return { latitude: latitude, longitude: longitude };
  });
});

coordinatesPromise.then(function(coordinates) {
  console.log(coordinates);
});
```

Though the `volcanoPromise` is used to calculate the `latitudePromise` and the `longitudePromise`,
the client will only make one request to the server for the volcano's data.

<!-- @multipleChoice -->

Which of the following timelines should the above code have ?

- [X] [](Request once)
- [ ] [](Request twice)

<!-- @end -->

<!-- @section -->

# The Lifetime of a Promise

Over the course of it's lifetime, a promise goes through the following stages:

- *nonexistent*  Before you create the promise in the first place, it doesn't exist.
- *pending*  Once the promise has been created,
  it exists in memory, and your code can interact with it (e.g. by calling `.then`),
  but won't have the data it's waiting for. We call this state the *pending* state.
- *fulfilled*  After the data for a promise arrives, the promise is *fulfilled*.

This diagram shows the various states the volcano promise moves through when you run
`var volcanoPromise = server.getVolcano();`

@asset, "contentType" : "outlearn/image", "location" : "images/promise-lifetime.svg" -->

<!-- @section -->

# Using RSVP.Promise.all

You can call `RSVP.Promise.all` to turn an array of promises into a promise for an array.

Here's an example:

<!-- @code, "base" : "mock-volcano-server" -->
```javascript
var volcanoPromise = server.getVolcano();
var currentTimePromise = server.getCurrentTime();
var geologistsPromise = server.getGeologists();

var arrayOfPromises = [ volcanoPromise, currentTimePromise, geologistsPromise ];

// arrayOfPromises.then will not work, since arrays do not have a .then method.

// Convert the array of promises into a promise for an array.
var promiseForArray = RSVP.Promise.all(arrayOfPromises);

promiseForArray.then(function(array) {
  console.log("Array length: " + array.length);

  for (var i = 0; i < array.length; ++i) {
    console.log("Array element " + i + ":");
    console.log(array[i]);
  }
});
```
<!-- @end -->

<!-- @multipleChoice -->

Take a guess, when `promiseForArray` executes, which of the following timelines might it have?

- [ ] [](promise-for-array-sequential)
- [ ] [](promise-for-array-immediate)
- [X] [](promise-for-array-parallel)
- [ ] [](promise-for-array-sequential-spaced)

<!-- @end -->

<!-- @section -->

# An elaborate example for putting it all together:

Our server has a function that returns a promise for the array of all our geologists:

<!-- @code, "base" : "mock-volcano-server" -->
```javascript
var geologistsPromise = server.getGeologists();

geologistsPromise.then(function(geologists) {
  for (var i = 0; i < geologists.length; ++i) {
    console.log("Geologist " + i + ":");
    console.log(geologists[i].name);
  }
});
```
<!-- @end -->

<!-- @code, "base" : "mock-volcano-server" -->

Create a promise for the first geologist in the list.

```javascript
var firstGeologistPromise =  ....;

firstGeologistPromise.then(function(geologist) {
  console.log("The first geologist is " + geologist.name);
});
```
<!-- @end -->

Our server also has a function that returns a promise for the array of readings taken by any given geologist:

```javascript
var readingsPromise = server.getReadings(geologist);
```


<!-- @code, "base" : "mock-volcano-server" -->

Create a promise that resolves to whatever geologist has taken readings that are closest to the volcano.

```javascript
var closestGeologistPromise = ..... Your code here ....

closestGeologistPromise.then(function(closestGeologist) {
  console.log(closestGeologist.name + " has taken the closest reading to the volcano.");
});
```
<!-- @end -->

<!-- @section -->

# Using RSVP.hash

Just as `RSVP.Promise.all` turns an array of promises into a promise for an array,
`RSVP.hash` turns a hash (a javascript object) of promises into a promise for a hash.

```javascript

var volcanoAndGeologistsPromise = RSVP.hash({
  volcano: server.getVolcano(),
  geologists: server.getGeologists(),
});

volcanoAndGeologistsPromise.then(function(volcanoAndGeologists) {
  var volcano = volcanoAndGeologists.volcano;
  var geologists = volcanoAndGeologists.geologists;

  console.log(volcano);
  console.log(geologists);
});

```

Remember the messagePromise from above? It looked like this:

```javascript
var messagePromise = server.getVolcano().then(function(volcano) {
  return server.getCurrentTime().then(function(currentTime) {
    return volcano.name + " is looking good at " + currentTime;
  });
});
```

This messagePromise is inefficient in that it requests the current time **in sequence** after requesting the volcano.

We rewrote it to get the currentTime and the volcano **in parallel** and compute the message
once both promises had resolved.

<!-- @code, "base" : "mock-volcano-server" -->

Using RSVP.hash, rewrite the messagePromise to make its requests in parallel.

```javascript
var messagePromise = ....;
```
<!-- @end -->

<!-- @section -->

# First things last: Creating promises from scratch

<!-- @multipleChoice -->

Which of the following things has been conspicuously absent from this module on promises?

- [ ] How to build new promises from old ones.
- [ ] How to create a new promise out of many existing promises.
- [ ] How to to control the order in which resources are requested from the server.
- [X] How you would create a starting promise in the first place.

<!-- @end -->

In many cases, you really don't need to be creating your own promises from scratch. Instead, you'll be working with
some library that returns the basic promises, and all you need to do is build new promises from old ones, just like
we've been doing in this tutorial.

For the sake of completeness, however, here is a quick example here of how you might create a promise in the first place.

First, make sure you know some jquery.

<!-- @link, "url" : "http://jquery.com/", "text" : "This example uses jquery.  If you don't know jquery already, it's a library for manipulating DOM and making ajax requests from a web browser. Take a quick look." -->

To create a new promise, you call the `new RSVP.Promise(f)` constructor with a function `f`.
`f` takes a function `resolve` as an argument, and should (at some point in the future) call `resolve` with the value that the promise
resolves to.

Here is our example:

<!-- @code, "base" : "mock-volcano-server" -->
```javascript

var server = {

  getGeologists: function() {
    return new RSVP.Promise(function(resolve) {
      $.ajax("/geologists")
        .done(function(data) {
          resolve(data);
        });
    });
  },

};

var geologistsPromise = server.getGeologists();
```

The getGeologists function returns a new promise right away, and kicks off an ajax
request for the array of geologists.  The promise remains pending for as long at it takes
for jquery to get back to us and call the `done` handler.  Once the server returns the
array of geologists, our code finally calls `resolve`.

<!-- @end -->

<!-- @code, "base" : "mock-volcano-server" -->

Using setTimeout, create a promise that returns the value 'Hello' after 3 seconds.

```javascript
var helloPromise = ....;
```

<!-- @end -->

<!-- @section -->

# Error Handling

TODO(KK): Write this section.


<!-- @section -->

# Summary

TODO(KK): Summarize the entirely of this module in a super succinct way.
